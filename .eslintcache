[{"C:\\Users\\USER\\WebstormProjects\\hooked\\src\\index.js":"1","C:\\Users\\USER\\WebstormProjects\\hooked\\src\\App.js":"2","C:\\Users\\USER\\WebstormProjects\\hooked\\src\\reportWebVitals.js":"3","C:\\Users\\USER\\WebstormProjects\\hooked\\src\\Components\\Movie.js":"4","C:\\Users\\USER\\WebstormProjects\\hooked\\src\\Components\\Search.js":"5","C:\\Users\\USER\\WebstormProjects\\hooked\\src\\reducer.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":3967,"mtime":1610379475629,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":699,"mtime":1610357787312,"results":"11","hashOfConfig":"8"},{"size":907,"mtime":1610362197807,"results":"12","hashOfConfig":"8"},{"size":1008,"mtime":1610379074197,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1384vka",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\USER\\WebstormProjects\\hooked\\src\\index.js",[],["30","31"],"C:\\Users\\USER\\WebstormProjects\\hooked\\src\\App.js",["32"],"import './App.css';\nimport logo from './logo.svg';\nimport React, {useReducer, useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport Icon from '@mdi/react';\nimport { mdiLoading, mdiChevronRight, mdiChevronLeft } from '@mdi/js';\nimport Movie from \"./Components/Movie\";\nimport Search from \"./Components/Search\";\nimport { initialState, reducer } from \"./reducer\";\n\nconst BASE_API_URL = 'https://www.omdbapi.com/';\nconst API_KEY = '47d93115';\n\nconst App = () => {\n    const title = 'React App';\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { movies, errorMessage, loading, totalResults, currentPage } = state;\n    const [searchValue, setSearchValue] = useState(\"Dark knight\");\n\n    // useEffect(() => {\n    //     axios.get(`${BASE_API_URL}?s=Dark+Knight&apikey=${API_KEY}`).then(jsonResponse => {\n    //         jsonResponse.data.currentPage = 1;\n    //         dispatch({\n    //             type: \"SEARCH_MOVIES_SUCCESS\",\n    //             payload: jsonResponse.data\n    //         });\n    //     });\n    // }, []);\n\n    useEffect(() => {\n        search(searchValue, currentPage);\n    }, [currentPage]) // TODO: here problem with load 2 str - after load page -> 1\n\n    const search = (searchValue, page) => {\n        dispatch({\n            type: \"SEARCH_MOVIES_REQUEST\"\n        });\n\n        axios(`${BASE_API_URL}?s=${searchValue}&page=${page}&apikey=${API_KEY}`).then(\n            jsonResponse => {\n                if (jsonResponse.data.Response === \"True\") {\n                    // jsonResponse.data.currentPage = 1;\n                    dispatch({\n                        type: \"SEARCH_MOVIES_SUCCESS\",\n                        payload: jsonResponse.data\n                    });\n                } else {\n                    dispatch({\n                        type: \"SEARCH_MOVIES_FAILURE\",\n                        error: jsonResponse.data.Error\n                    });\n                }\n            }\n        );\n    };\n\n    const changePage = (dir) => {\n        if (dir) {\n            if (currentPage < totalPages()) {\n                dispatch({\n                    type: \"CHANGE_PAGE\",\n                    payload: currentPage + 1\n                })\n            }\n        }\n        else {\n            if (currentPage > 0) {\n                dispatch({\n                    type: \"CHANGE_PAGE\",\n                    payload: currentPage - 1\n                })\n            }\n        }\n    }\n\n    const totalPages = () => {\n        return Math.round(totalResults / 10 + 1)\n    }\n\n    const retrievedMovies =\n        loading && !errorMessage ? (\n            <div className=\"load\">\n                <Icon path={mdiLoading} size={6} spin={true}/>\n            </div>\n        ) : errorMessage ? (\n            <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n            movies.map((movie, index) => (\n                <Movie key={`${index}-${movie.Title}`} movie={movie} />\n            ))\n        );\n\n    return (\n        <div className=\"App\">\n            <div className=\"m-container\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h3>{title}</h3>\n                </header>\n\n                <Search search={search} searchValue={searchValue} setSearchValue={setSearchValue}/>\n\n                <div className=\"movies\">{retrievedMovies}</div>\n\n                <div className=\"pages\">\n                    <button className=\"search-button\" onClick={() => changePage(false)}>\n                        <Icon className=\"icon\" size={1} path={mdiChevronLeft}/>\n                    </button>\n                    <p>{currentPage} / {totalPages()}</p>\n                    <button className=\"search-button\" onClick={() => changePage(true)}>\n                        <Icon className=\"icon\" size={1} path={mdiChevronRight}/>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","C:\\Users\\USER\\WebstormProjects\\hooked\\src\\reportWebVitals.js",[],"C:\\Users\\USER\\WebstormProjects\\hooked\\src\\Components\\Movie.js",[],"C:\\Users\\USER\\WebstormProjects\\hooked\\src\\Components\\Search.js",["33"],"import React, { useState } from \"react\";\r\nimport Icon from \"@mdi/react\";\r\nimport { mdiMovieSearch } from '@mdi/js';\r\n\r\nconst Search = ({ search, searchValue, setSearchValue }) => {\r\n\r\n    const handleSearchInputChanges = e => {\r\n        setSearchValue(e.target.value);\r\n    };\r\n\r\n    const resetInputField = () => {\r\n        setSearchValue(\"\");\r\n    };\r\n\r\n    const callSearchFunction = e => {\r\n        e.preventDefault();\r\n        search(searchValue);\r\n        resetInputField();\r\n    };\r\n\r\n    return (\r\n        <div className=\"search\">\r\n            <input\r\n                value={searchValue}\r\n                onChange={handleSearchInputChanges}\r\n                type=\"text\"\r\n            />\r\n\r\n            <button className=\"search-button\" onClick={callSearchFunction}>\r\n                <Icon size={1} path={mdiMovieSearch}/>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n",["34","35"],"C:\\Users\\USER\\WebstormProjects\\hooked\\src\\reducer.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":32,"column":8,"nodeType":"42","endLine":32,"endColumn":21,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"36","replacedBy":"48"},{"ruleId":"38","replacedBy":"49"},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'searchValue'. Either include it or remove the dependency array.","ArrayExpression",["52"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["50"],["51"],"no-global-assign","no-unsafe-negation",{"desc":"53","fix":"54"},"Update the dependencies array to be: [currentPage, searchValue]",{"range":"55","text":"56"},[1131,1144],"[currentPage, searchValue]"]